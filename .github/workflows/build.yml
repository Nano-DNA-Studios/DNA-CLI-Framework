name: Build
on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: read # Gives permission to read/write to the repo
  packages: write # Gives permission to read/write nuget packages

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Install .NET to Device
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x.x"

      - name: Clone and Checkout the Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run .NET Restore to reload NuGet Packages
        run: dotnet restore

  build-nuget:
    runs-on: self-hosted
    needs: setup
    outputs:
      packages: ${{ steps.extract-nuget-packages.outputs.PACKAGES}}
    steps:
      - name: Build for NuGet 
        shell: bash
        run: dotnet publish -c Release -f net8.0 --no-restore -o bin/Release/net8.0

      - name: Pack for NuGet
        id: pack-nuget
        shell: bash
        run: dotnet pack -c Release --no-restore --no-build 

      - name: Extract Nuget Package Names
        id: extract-nuget-packages
        shell: bash
        run: |
          packageNames=()
          while IFS= read -r file; do
              packageNames+=("$(basename "$file")")
          done < <(find . -type f -name "*.nupkg")

          if [ ${#packageNames[@]} -eq 0 ]; then
              echo "No packages found. Setting empty JSON array."
              packageJson="[]"
          elif [ ${#packageNames[@]} -eq 1 ]; then
              echo "Single Package Detected. Formatting in JSON Manually"
              packageJson="[\"${packageNames[0]}\"]"
          else
              echo "Packing as JSON Array"
              packageJson=$(printf '%s\n' "${packageNames[@]}" | jq -R . | jq -s .)
          fi

          # Ensure proper JSON formatting and escaping
          packageJson=$(echo "$packageJson" | jq -c .)

          echo "JSON : $packageJson"
          echo "PACKAGES=$packageJson" >> "$GITHUB_OUTPUT"


  #names:
  #  runs-on: self-hosted
  #  needs: pack-nuget
  #  outputs:
  #    packages: ${{ steps.extract-nuget-packages.outputs.PACKAGES}}
#
  #  steps:
      

  upload-nuget:
    runs-on: self-hosted
    needs: build-nuget
    strategy:
      matrix:
        packages: ${{ fromJson(needs.build-nuget.outputs.packages) }}
    steps:
      - name: Upload NuGet packages as build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.packages }}
          path: ./nupkg/${{ matrix.packages }}
          retention-days: 1

  build-source:
    needs: setup
    runs-on: self-hosted
    strategy:
      max-parallel: 6
      matrix:
        platforms: ["win-x64", "win-x86", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"] # 
    steps:
      - name: Build as Standalone Source
        shell: bash
        run: dotnet publish -c Release -p:PublishTrimmed=true -r "${{ matrix.platforms }}" --self-contained true --no-restore -o bin/Release/${{ matrix.platforms }}

  upload-source:
    needs: build-source
    runs-on: self-hosted
    strategy:
      max-parallel: 6
      matrix:
        platforms: ["win-x64", "win-x86", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"] # 
    steps:
      - name: Upload Standalone Source
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platforms }}
          path: bin/Release/${{ matrix.platforms }}
          retention-days: 1


  #publish-to-nuget:
  #  needs: [setup, build-nuget, names, build-source]
  #  runs-on: self-hosted
  #  strategy:
  #    matrix:
  #      packages: ${{ fromJson(needs.names.outputs.packages) }}
  #  steps:
  #    - name: Publish to GitHub Packages
  #      shell: bash
  #      run: |
#
  #        dotnet nuget push "./nupkg/${{ matrix.packages }}" \
  #          --source "https://nuget.pkg.github.com/Nano-DNA-Studios/index.json" \
  #          --api-key ${{ secrets.GITHUB_TOKEN }} \
  #          --skip-duplicate
#
  #    - name: Publish to NuGet Website
  #      shell: bash
  #      env:
  #        NUGET_API_KEY: ${{ secrets.NUGET_KEY }}
  #      run: |
  #        dotnet nuget push "./nupkg/${{ matrix.packages }}" \
  #          --source "https://api.nuget.org/v3/index.json" \
  #          --api-key "$NUGET_API_KEY" \
  #          --skip-duplicate