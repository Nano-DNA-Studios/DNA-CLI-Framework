name: Build
on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: read # Gives permission to read/write to the repo
  packages: read # Gives permission to read/write nuget packages

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Install .NET to Device
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x.x"

      - name: Clone and Checkout the Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run .NET Restore to reload NuGet Packages
        run: dotnet restore

  build:
    needs: setup
    runs-on: self-hosted
    strategy:
      matrix:
        platforms: ["win-x64", "win-x86", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"]
    steps:
      - name: Build Platform
        id: build-platform
        shell: bash
        run: dotnet build DNA-CLI-Framework/DNA-CLI-Framework.csproj -c Release -p:RuntimeIdentifier="${{ matrix.platforms }}" --no-restore

      #- name: Pack Platform
      #  id: pack-platform
      #  shell: bash
      #  run: dotnet pack -c Release -p:Platform="${{ matrix.platforms }}" --no-restore --no-build 

  pack:
    needs: [setup, build]
    runs-on: self-hosted
    steps:
      - name: Pack NuGet Packages
        id: pack-nuget
        shell: bash
        run: dotnet pack -c Release --no-restore --no-build 

  names:
    runs-on: self-hosted
    needs: [setup, build, pack]
    outputs:
      packages: ${{ steps.extract-nuget-packages.outputs.PACKAGES}}

    steps:
      - name: Extract Nuget Package Names
        id: extract-nuget-packages
        shell: bash
        run: |
          packageNames=()
          while IFS= read -r file; do
              packageNames+=("$(basename "$file")")
          done < <(find . -type f -name "*.nupkg")

          if [ ${#packageNames[@]} -eq 0 ]; then
              echo "No packages found. Setting empty JSON array."
              packageJson="[]"
          elif [ ${#packageNames[@]} -eq 1 ]; then
              echo "Single Package Detected. Formatting in JSON Manually"
              packageJson="[\"${packageNames[0]}\"]"
          else
              echo "Packing as JSON Array"
              packageJson=$(printf '%s\n' "${packageNames[@]}" | jq -R . | jq -s .)
          fi

          # Ensure proper JSON formatting and escaping
          packageJson=$(echo "$packageJson" | jq -c .)

          echo "JSON : $packageJson"
          echo "PACKAGES=$packageJson" >> "$GITHUB_OUTPUT"



  # build:
  #   runs-on: self-hosted
  #   outputs:
  #     packages:

  #   steps:
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: "8.x.x"

  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Restore NuGet Packages
  #       run: dotnet restore

  #     - name: Dotnet Build x86
  #       id: dotnet-build-x86
  #       run: dotnet build -c Release -p:Platform="x86" --no-restore
  #     - name: Dotnet Build x64
  #       id: dotnet-build-x64
  #       run: dotnet build -c Release -p:Platform="x64" --no-restore
  #     - name: Dotnet Build AnyCPU
  #       id: dotnet-build-AnyCPU
  #       run: dotnet build -c Release -p:Platform="Any CPU" --no-restore
  #     - name: Dotnet Pack
  #       id: dotnet-pack
  #       run: dotnet pack -c Release --no-restore --no-build
  #     - name: Extract Nuget Package Names
  #       id: extract-nuget-packages
  #       shell: powershell
  #       run: |
  #         $packageNames = Get-ChildItem -Path . -Filter "*.nupkg" -Recurse | ForEach-Object {
  #              $_.Name
  #          }
  #          foreach ($package in $packageNames) {
  #              Write-Output "Package : $package"
  #          }
  #          $packageJson = {}
  #          if ($packageNames.Count -eq 1) {
  #              Write-Output "Single Package Detected. Formatting in JSON Manually"
  #              $packageJson = "[`"" + ($packageNames -join "`", `"") + "`"]"
  #          } else
  #          {
  #              Write-Output "Packing as JSON Array"
  #              $packageJson = $packageNames | ConvertTo-Json -Compress
  #          }
  #          Write-Output "JSON : $packageJson"
  #          Write-Output "PACKAGES=$packageJson" >> $env:GITHUB_OUTPUT

  upload:
    runs-on: self-hosted
    needs: [setup, build, names]
    strategy:
      matrix:
        packages: ${{ fromJson(needs.names.outputs.packages) }}
    steps:
      - name: Upload NuGet packages as build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.packages }}
          path: ./nupkg/${{ matrix.packages }}
          retention-days: 1